// Generated from uno.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,33,361,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,
1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,
1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,
31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,
42,234,8,42,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,
1,47,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,51,1,51,5,51,259,8,51,10,
51,12,51,262,9,51,1,52,1,52,1,52,1,52,5,52,268,8,52,10,52,12,52,271,9,52,
1,52,1,52,1,53,3,53,276,8,53,1,53,1,53,1,53,5,53,281,8,53,10,53,12,53,284,
9,53,3,53,286,8,53,1,54,1,54,1,54,1,54,5,54,292,8,54,10,54,12,54,295,9,54,
1,54,1,54,1,55,3,55,300,8,55,1,55,1,55,1,55,5,55,305,8,55,10,55,12,55,308,
9,55,3,55,310,8,55,1,55,1,55,5,55,314,8,55,10,55,12,55,317,9,55,1,56,1,56,
1,56,1,56,5,56,323,8,56,10,56,12,56,326,9,56,1,56,1,56,1,57,1,57,1,57,5,
57,333,8,57,10,57,12,57,336,9,57,1,57,1,57,1,58,1,58,1,58,3,58,343,8,58,
1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,62,4,62,356,8,62,11,
62,12,62,357,1,62,1,62,0,0,63,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
10,21,11,23,12,25,13,27,14,29,15,31,16,33,0,35,0,37,0,39,0,41,0,43,0,45,
0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,
75,0,77,0,79,0,81,0,83,0,85,17,87,18,89,19,91,20,93,21,95,22,97,23,99,24,
101,25,103,26,105,27,107,28,109,29,111,30,113,31,115,32,117,0,119,0,121,
0,123,0,125,33,1,0,34,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,
0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,
0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,2,
0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,2,
0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,2,
0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,2,
0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,3,0,65,90,95,95,97,122,
4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,8,0,34,34,47,47,92,92,98,
98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,31,34,34,
92,92,3,0,9,10,13,13,32,32,352,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
0,0,0,31,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,
0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,
0,115,1,0,0,0,0,125,1,0,0,0,1,127,1,0,0,0,3,129,1,0,0,0,5,131,1,0,0,0,7,
133,1,0,0,0,9,135,1,0,0,0,11,137,1,0,0,0,13,139,1,0,0,0,15,141,1,0,0,0,17,
143,1,0,0,0,19,145,1,0,0,0,21,148,1,0,0,0,23,152,1,0,0,0,25,155,1,0,0,0,
27,159,1,0,0,0,29,162,1,0,0,0,31,167,1,0,0,0,33,173,1,0,0,0,35,175,1,0,0,
0,37,177,1,0,0,0,39,179,1,0,0,0,41,181,1,0,0,0,43,183,1,0,0,0,45,185,1,0,
0,0,47,187,1,0,0,0,49,189,1,0,0,0,51,191,1,0,0,0,53,193,1,0,0,0,55,195,1,
0,0,0,57,197,1,0,0,0,59,199,1,0,0,0,61,201,1,0,0,0,63,203,1,0,0,0,65,205,
1,0,0,0,67,207,1,0,0,0,69,209,1,0,0,0,71,211,1,0,0,0,73,213,1,0,0,0,75,215,
1,0,0,0,77,217,1,0,0,0,79,219,1,0,0,0,81,221,1,0,0,0,83,223,1,0,0,0,85,233,
1,0,0,0,87,235,1,0,0,0,89,237,1,0,0,0,91,240,1,0,0,0,93,243,1,0,0,0,95,246,
1,0,0,0,97,248,1,0,0,0,99,251,1,0,0,0,101,253,1,0,0,0,103,256,1,0,0,0,105,
263,1,0,0,0,107,285,1,0,0,0,109,287,1,0,0,0,111,299,1,0,0,0,113,318,1,0,
0,0,115,329,1,0,0,0,117,339,1,0,0,0,119,344,1,0,0,0,121,350,1,0,0,0,123,
352,1,0,0,0,125,355,1,0,0,0,127,128,5,40,0,0,128,2,1,0,0,0,129,130,5,41,
0,0,130,4,1,0,0,0,131,132,5,44,0,0,132,6,1,0,0,0,133,134,5,46,0,0,134,8,
1,0,0,0,135,136,5,43,0,0,136,10,1,0,0,0,137,138,5,45,0,0,138,12,1,0,0,0,
139,140,5,42,0,0,140,14,1,0,0,0,141,142,5,47,0,0,142,16,1,0,0,0,143,144,
5,37,0,0,144,18,1,0,0,0,145,146,3,61,30,0,146,147,3,59,29,0,147,20,1,0,0,
0,148,149,3,33,16,0,149,150,3,59,29,0,150,151,3,39,19,0,151,22,1,0,0,0,152,
153,3,61,30,0,153,154,3,67,33,0,154,24,1,0,0,0,155,156,3,59,29,0,156,157,
3,61,30,0,157,158,3,71,35,0,158,26,1,0,0,0,159,160,3,49,24,0,160,161,3,59,
29,0,161,28,1,0,0,0,162,163,3,71,35,0,163,164,3,67,33,0,164,165,3,73,36,
0,165,166,3,41,20,0,166,30,1,0,0,0,167,168,3,43,21,0,168,169,3,33,16,0,169,
170,3,55,27,0,170,171,3,69,34,0,171,172,3,41,20,0,172,32,1,0,0,0,173,174,
7,0,0,0,174,34,1,0,0,0,175,176,7,1,0,0,176,36,1,0,0,0,177,178,7,2,0,0,178,
38,1,0,0,0,179,180,7,3,0,0,180,40,1,0,0,0,181,182,7,4,0,0,182,42,1,0,0,0,
183,184,7,5,0,0,184,44,1,0,0,0,185,186,7,6,0,0,186,46,1,0,0,0,187,188,7,
7,0,0,188,48,1,0,0,0,189,190,7,8,0,0,190,50,1,0,0,0,191,192,7,9,0,0,192,
52,1,0,0,0,193,194,7,10,0,0,194,54,1,0,0,0,195,196,7,11,0,0,196,56,1,0,0,
0,197,198,7,12,0,0,198,58,1,0,0,0,199,200,7,13,0,0,200,60,1,0,0,0,201,202,
7,14,0,0,202,62,1,0,0,0,203,204,7,15,0,0,204,64,1,0,0,0,205,206,7,16,0,0,
206,66,1,0,0,0,207,208,7,17,0,0,208,68,1,0,0,0,209,210,7,18,0,0,210,70,1,
0,0,0,211,212,7,19,0,0,212,72,1,0,0,0,213,214,7,20,0,0,214,74,1,0,0,0,215,
216,7,21,0,0,216,76,1,0,0,0,217,218,7,22,0,0,218,78,1,0,0,0,219,220,7,23,
0,0,220,80,1,0,0,0,221,222,7,24,0,0,222,82,1,0,0,0,223,224,7,25,0,0,224,
84,1,0,0,0,225,234,3,87,43,0,226,234,3,89,44,0,227,234,3,91,45,0,228,234,
3,93,46,0,229,234,3,95,47,0,230,234,3,97,48,0,231,234,3,99,49,0,232,234,
3,101,50,0,233,225,1,0,0,0,233,226,1,0,0,0,233,227,1,0,0,0,233,228,1,0,0,
0,233,229,1,0,0,0,233,230,1,0,0,0,233,231,1,0,0,0,233,232,1,0,0,0,234,86,
1,0,0,0,235,236,5,61,0,0,236,88,1,0,0,0,237,238,5,61,0,0,238,239,5,61,0,
0,239,90,1,0,0,0,240,241,5,60,0,0,241,242,5,62,0,0,242,92,1,0,0,0,243,244,
5,33,0,0,244,245,5,61,0,0,245,94,1,0,0,0,246,247,5,62,0,0,247,96,1,0,0,0,
248,249,5,62,0,0,249,250,5,61,0,0,250,98,1,0,0,0,251,252,5,60,0,0,252,100,
1,0,0,0,253,254,5,60,0,0,254,255,5,61,0,0,255,102,1,0,0,0,256,260,7,26,0,
0,257,259,7,27,0,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,
1,0,0,0,261,104,1,0,0,0,262,260,1,0,0,0,263,264,5,40,0,0,264,269,3,107,53,
0,265,266,5,44,0,0,266,268,3,107,53,0,267,265,1,0,0,0,268,271,1,0,0,0,269,
267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,269,1,0,0,0,272,273,5,41,
0,0,273,106,1,0,0,0,274,276,5,45,0,0,275,274,1,0,0,0,275,276,1,0,0,0,276,
277,1,0,0,0,277,286,5,48,0,0,278,282,7,28,0,0,279,281,7,29,0,0,280,279,1,
0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,286,1,0,0,0,284,
282,1,0,0,0,285,275,1,0,0,0,285,278,1,0,0,0,286,108,1,0,0,0,287,288,5,40,
0,0,288,293,3,111,55,0,289,290,5,44,0,0,290,292,3,111,55,0,291,289,1,0,0,
0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,293,
1,0,0,0,296,297,5,41,0,0,297,110,1,0,0,0,298,300,5,45,0,0,299,298,1,0,0,
0,299,300,1,0,0,0,300,309,1,0,0,0,301,310,5,48,0,0,302,306,7,28,0,0,303,
305,7,29,0,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,
0,0,307,310,1,0,0,0,308,306,1,0,0,0,309,301,1,0,0,0,309,302,1,0,0,0,310,
311,1,0,0,0,311,315,5,46,0,0,312,314,7,29,0,0,313,312,1,0,0,0,314,317,1,
0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,112,1,0,0,0,317,315,1,0,0,0,318,
319,5,40,0,0,319,324,3,115,57,0,320,321,5,44,0,0,321,323,3,115,57,0,322,
320,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,327,1,0,
0,0,326,324,1,0,0,0,327,328,5,41,0,0,328,114,1,0,0,0,329,334,5,34,0,0,330,
333,3,117,58,0,331,333,3,123,61,0,332,330,1,0,0,0,332,331,1,0,0,0,333,336,
1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,334,1,0,0,0,
337,338,5,34,0,0,338,116,1,0,0,0,339,342,5,92,0,0,340,343,7,30,0,0,341,343,
3,119,59,0,342,340,1,0,0,0,342,341,1,0,0,0,343,118,1,0,0,0,344,345,5,117,
0,0,345,346,3,121,60,0,346,347,3,121,60,0,347,348,3,121,60,0,348,349,3,121,
60,0,349,120,1,0,0,0,350,351,7,31,0,0,351,122,1,0,0,0,352,353,8,32,0,0,353,
124,1,0,0,0,354,356,7,33,0,0,355,354,1,0,0,0,356,357,1,0,0,0,357,355,1,0,
0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,6,62,0,0,360,126,1,0,0,0,17,
0,233,260,269,275,282,285,293,299,306,309,315,324,332,334,342,357,1,6,0,
0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class unoLexer extends antlr4.Lexer {

    static grammarFileName = "uno.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", "','", "'.'", "'+'", "'-'", 
                         "'*'", "'/'", "'%'", null, null, null, null, null, 
                         null, null, null, "'='", "'=='", "'<>'", "'!='", 
                         "'>'", "'>='", "'<'", "'<='" ];
	static symbolicNames = [ null, null, null, null, null, "T_ADD", "T_SUB", 
                          "T_MUL", "T_DIV", "T_MOD", "T_ON", "T_AND", "T_OR", 
                          "T_NOT", "T_IN", "T_TRUE", "T_FALSE", "T_COMPARE", 
                          "T_EQUAL", "T_EQUAL2", "T_NOTEQUAL", "T_NOTEQUAL2", 
                          "T_GREATER", "T_GREATEREQUAL", "T_LESS", "T_LESSEQUAL", 
                          "IDENTIFIER", "INTEGER_LIST", "INTEGER", "DECIMAL_LIST", 
                          "DECIMAL", "STRING_LIST", "STRING", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T_ADD", "T_SUB", 
                      "T_MUL", "T_DIV", "T_MOD", "T_ON", "T_AND", "T_OR", 
                      "T_NOT", "T_IN", "T_TRUE", "T_FALSE", "A", "B", "C", 
                      "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", 
                      "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", 
                      "X", "Y", "Z", "T_COMPARE", "T_EQUAL", "T_EQUAL2", 
                      "T_NOTEQUAL", "T_NOTEQUAL2", "T_GREATER", "T_GREATEREQUAL", 
                      "T_LESS", "T_LESSEQUAL", "IDENTIFIER", "INTEGER_LIST", 
                      "INTEGER", "DECIMAL_LIST", "DECIMAL", "STRING_LIST", 
                      "STRING", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

unoLexer.EOF = antlr4.Token.EOF;
unoLexer.T__0 = 1;
unoLexer.T__1 = 2;
unoLexer.T__2 = 3;
unoLexer.T__3 = 4;
unoLexer.T_ADD = 5;
unoLexer.T_SUB = 6;
unoLexer.T_MUL = 7;
unoLexer.T_DIV = 8;
unoLexer.T_MOD = 9;
unoLexer.T_ON = 10;
unoLexer.T_AND = 11;
unoLexer.T_OR = 12;
unoLexer.T_NOT = 13;
unoLexer.T_IN = 14;
unoLexer.T_TRUE = 15;
unoLexer.T_FALSE = 16;
unoLexer.T_COMPARE = 17;
unoLexer.T_EQUAL = 18;
unoLexer.T_EQUAL2 = 19;
unoLexer.T_NOTEQUAL = 20;
unoLexer.T_NOTEQUAL2 = 21;
unoLexer.T_GREATER = 22;
unoLexer.T_GREATEREQUAL = 23;
unoLexer.T_LESS = 24;
unoLexer.T_LESSEQUAL = 25;
unoLexer.IDENTIFIER = 26;
unoLexer.INTEGER_LIST = 27;
unoLexer.INTEGER = 28;
unoLexer.DECIMAL_LIST = 29;
unoLexer.DECIMAL = 30;
unoLexer.STRING_LIST = 31;
unoLexer.STRING = 32;
unoLexer.WS = 33;



